; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
lib_dir = lib
include_dir = lib

[common_env_data]
upload_speed = 921600
monitor_speed =  115200
platform = espressif8266 @ 4.1.0
platform32 = espressif32 @ 5.3.0
framework = arduino
board = d1_mini
build_unflags = 
build_flags = 
	-Wl,-Map,output.map
	-D BAUD=${common_env_data.monitor_speed}
	#-D SKIP_SLEEPMODE
	#-D FORCE_GRAVITY_MODE
	-D ACTIVATE_OTA
	-D USE_LITTLEFS=true
	-D USER_SSID=\""\""           # =\""myssid\""
	-D USER_SSID_PWD=\""\""       # =\""mypwd\""	
	-D CFG_APPVER="\"1.3.0\""
	-D CFG_GITREV=\""beta-3\""
	#!python script/git_rev.py
lib_deps =
	# Using local copy of these libraries
  	# https://github.com/mp-se/i2cdevlib.git#<document> 		
	# https://github.com/mp-se/OneWire																		  
	# https://github.com/mp-se/Arduino-Temperature-Control-Library
	# https://github.com/khoih-prog/ESP_WiFiManager
	# https://github.com/khoih-prog/ESP_DoubleResetDetector
	https://github.com/mp-se/tinyexpr#v1.0.0
	https://github.com/mp-se/Arduino-Log#1.1.1
	https://github.com/mp-se/ArduinoJson#v6.18.5
	https://github.com/mp-se/arduinoCurveFitting#v1.0.6
	https://github.com/mp-se/arduino-mqtt#v2.5.1
lib_deps32 = 
	https://github.com/mp-se/NimBLE-Arduino#1.4.1
extra_scripts =  
	script/copy_firmware.py
	script/create_versionjson.py

; [env:gravity-debug]
; upload_speed = ${common_env_data.upload_speed}
; monitor_speed = ${common_env_data.monitor_speed}
; framework = ${common_env_data.framework}
; platform = ${common_env_data.platform}
; extra_scripts = ${common_env_data.extra_scripts}
; build_unflags =	${common_env_data.build_unflags}
; build_flags = 
;   ${common_env_data.build_flags}
; 	#-D DEBUG_ESP_HTTP_CLIENT	
; 	#-D DEBUG_ESP_HTTP_SERVER	
; 	#-D DEBUG_ESP_PORT=Serial			  	
; 	#-D DEBUG_ESP_WIFI
; 	#-D DEBUG_ESP_SSL
; 	#-D DEBUG_ESP_CORE
; 	-DPIO_FRAMEWORK_ARDUINO_ENABLE_EXCEPTIONS
; 	-DCOLLECT_PERFDATA	# Collect runtime data for a few defined methods to measure time, dumped to serial and/or influxdb 
; 	-DLOG_LEVEL=6 
; lib_deps = 
; 	https://github.com/mp-se/incbin	#	https://github.com/graphitemaster/incbin
; 	${common_env_data.lib_deps}
; board = ${common_env_data.board}
; build_type = release
; board_build.filesystem = littlefs
; monitor_filters = esp8266_exception_decoder

[env:gravity-release]
upload_speed = ${common_env_data.upload_speed}
monitor_speed = ${common_env_data.monitor_speed}
framework = ${common_env_data.framework}
platform = ${common_env_data.platform}
extra_scripts = ${common_env_data.extra_scripts}
build_unflags = ${common_env_data.build_unflags}
build_flags = 
  	${common_env_data.build_flags}
	-D LOG_LEVEL=4
	#-D USE_SERIAL_PINS # Use the TX/RX pins for the serial port
	#-D RUN_HARDWARE_TEST # Will run diagnositc setup to validate the GPIO configurations
lib_deps = 
	https://github.com/mp-se/incbin#v1.0.0
	${common_env_data.lib_deps}
board = ${common_env_data.board}
build_type = release # debug
board_build.filesystem = littlefs
build_src_filter = +<*> -<../test/tests*.cpp>
monitor_filters = esp8266_exception_decoder

[env:gravity-unit]
upload_speed = ${common_env_data.upload_speed}
monitor_speed = ${common_env_data.monitor_speed}
framework = ${common_env_data.framework}
platform = ${common_env_data.platform}
extra_scripts = ${common_env_data.extra_scripts}
build_unflags = ${common_env_data.build_unflags}
build_flags = 
  	${common_env_data.build_flags}
	-D LOG_LEVEL=4
lib_deps = 
	https://github.com/mp-se/incbin#v1.0.0
	https://github.com/bxparks/AUnit#v1.6.1
	${common_env_data.lib_deps}
board = ${common_env_data.board}
build_type = debug
board_build.filesystem = littlefs
build_src_filter = +<*> -<main.cpp> +<../test/tests*.cpp>
monitor_filters = esp8266_exception_decoder

[env:gravity32-release]
framework = ${common_env_data.framework}
platform = ${common_env_data.platform32}
upload_speed = ${common_env_data.upload_speed}
monitor_speed = ${common_env_data.monitor_speed}
extra_scripts = ${common_env_data.extra_scripts}
build_unflags = 
	${common_env_data.build_unflags}
build_flags = 
	-Wl,-Map,output.map
	-D CORE_DEBUG_LEVEL=2
	${common_env_data.build_flags}
	-D LOG_LEVEL=4
	-D ESP32D1
	#-DUSE_SERIAL_PINS # Use the TX/RX pins for the serial port
lib_deps = 
	${common_env_data.lib_deps}
	${common_env_data.lib_deps32}	
lib_ignore = 
board = wemos_d1_mini32 
build_type = release
board_build.partitions = part32.csv
board_build.filesystem = littlefs 
board_build.embed_txtfiles =
	html/calibration.min.htm
	html/config.min.htm
	html/firmware.min.htm
	html/format.min.htm
	html/about.min.htm
	html/index.min.htm
	html/test.min.htm
	html/backup.min.htm

[env:gravity32c3-release]
framework = ${common_env_data.framework}
#platform = ${common_env_data.platform32}
platform = espressif32 @ 5.2.0 # revert to older version so wifi works better. 
upload_speed = ${common_env_data.upload_speed}
monitor_speed = ${common_env_data.monitor_speed}
extra_scripts = ${common_env_data.extra_scripts}
build_unflags = 
	${common_env_data.build_unflags}
build_flags = 
	-Wl,-Map,output.map
	${common_env_data.build_flags}
	-D LOG_LEVEL=4
	-D CORE_DEBUG_LEVEL=2
	-D ESP32C3
	-D ARDUINO_ESP32C3_DEV
	#-DUSE_SERIAL_PINS # Use the TX/RX pins for the serial port
lib_deps = 
	${common_env_data.lib_deps}
	${common_env_data.lib_deps32}
lib_ignore = 
board = lolin_c3_mini 
build_type = release
board_build.partitions = part32.csv
board_build.filesystem = littlefs 
board_build.embed_txtfiles =
	html/calibration.min.htm
	html/config.min.htm
	html/firmware.min.htm
	html/format.min.htm
	html/about.min.htm
	html/index.min.htm
	html/test.min.htm
	html/backup.min.htm

[env:gravity32c3v1-release]
framework = ${common_env_data.framework}
platform = ${common_env_data.platform32}
upload_speed = ${common_env_data.upload_speed}
monitor_speed = ${common_env_data.monitor_speed}
extra_scripts = ${common_env_data.extra_scripts}
build_unflags = 
	${common_env_data.build_unflags}
build_flags = 
	-Wl,-Map,output.map
	${common_env_data.build_flags}
	-D LOG_LEVEL=4
	-D CORE_DEBUG_LEVEL=2
	-D ESP32C3
	-D ARDUINO_ESP32C3_DEV
	-D ESP32C3_REV1
	#-D USE_SERIAL_PINS # Use the TX/RX pins for the serial port
lib_deps = 
	${common_env_data.lib_deps}
	${common_env_data.lib_deps32}
lib_ignore = 
board = lolin_c3_mini 
build_type = release
board_build.partitions = part32.csv
board_build.filesystem = littlefs 
board_build.embed_txtfiles =
	html/calibration.min.htm
	html/config.min.htm
	html/firmware.min.htm
	html/format.min.htm
	html/about.min.htm
	html/index.min.htm
	html/test.min.htm
	html/backup.min.htm

[env:gravity32s2-release]
framework = ${common_env_data.framework}
platform = ${common_env_data.platform32}
upload_speed = ${common_env_data.upload_speed}
monitor_speed = ${common_env_data.monitor_speed}
extra_scripts = ${common_env_data.extra_scripts}
build_unflags = 
	${common_env_data.build_unflags}
build_flags = 
	-Wl,-Map,output.map
	${common_env_data.build_flags}
	-D LOG_LEVEL=4
	-D CORE_DEBUG_LEVEL=2
	-D ESP32S2
	-D ARDUINO_ESP32S2_DEV
	#-D USE_SERIAL_PINS # Use the TX/RX pins for the serial port
	#-D RUN_HARDWARE_TEST # Will run diagnositc setup to validate the GPIO configurations
lib_deps = 
	${common_env_data.lib_deps}
lib_ignore = 
board = lolin_s2_mini 
build_type = release
board_build.partitions = part32.csv
board_build.filesystem = littlefs 
board_build.embed_txtfiles =
	html/calibration.min.htm
	html/config.min.htm
	html/firmware.min.htm
	html/format.min.htm
	html/about.min.htm
	html/index.min.htm
	html/test.min.htm
	html/backup.min.htm

; [env:gravity32c3-debug]
; framework = ${common_env_data.framework}
; platform = ${common_env_data.platform32}
; upload_speed = ${common_env_data.upload_speed}
; monitor_speed = ${common_env_data.monitor_speed}
; monitor_filters = time, colorize, log2file, esp32_exception_decoder
; extra_scripts = ${common_env_data.extra_scripts}
; upload_port = COM8
; debug_tool = esp-prog
; debug_init_break = break setup
; build_unflags = 
; 	${common_env_data.build_unflags}
; build_flags = 
; 	-Wl,-Map,output.map
; 	${common_env_data.build_flags}
; 	-D LOG_LEVEL=6
; 	-D CORE_DEBUG_LEVEL=0
; 	-D JTAG_DEBUG
; 	-D ESP32C3
; 	#-D USE_SERIAL_PINS # Use the TX/RX pins for the serial port
; 	-D ARDUINO_ESP32C3_DEV
; 	-D COLLECT_PERFDATA	# Collect runtime data for a few defined methods to measure time, dumped to serial and/or influxdb 
; lib_deps = 
; 	${common_env_data.lib_deps}
; 	${common_env_data.lib_deps32}
; lib_ignore = 
; board = esp32-c3-devkitm-1
; build_type = debug
; board_build.partitions = part32.csv
; board_build.filesystem = littlefs 
; board_build.embed_txtfiles =
; 	html/calibration.min.htm
; 	html/config.min.htm
; 	html/firmware.min.htm
; 	html/format.min.htm
; 	html/about.min.htm
; 	html/index.min.htm
; 	html/test.min.htm
; 	html/backup.min.htm

# This is a version for the floaty hardware. No DSB18 sensor and no battery measurement.
[env:gravity32lite-release] 
framework = ${common_env_data.framework}
platform = ${common_env_data.platform32}
upload_speed = ${common_env_data.upload_speed}
monitor_speed = ${common_env_data.monitor_speed}
extra_scripts = ${common_env_data.extra_scripts}
build_unflags = 
	${common_env_data.build_unflags}
build_flags = 
	-Wl,-Map,output.map
	${common_env_data.build_flags}
	-D LOG_LEVEL=4
	-D CORE_DEBUG_LEVEL=2
	-D ESP32LITE
	-D FLOATY
	#-D USE_SERIAL_PINS # Use the TX/RX pins for the serial port
lib_deps = 
	${common_env_data.lib_deps}
	${common_env_data.lib_deps32}
lib_ignore = 
board = lolin32_lite 
build_type = release
board_build.partitions = part32.csv
board_build.filesystem = littlefs 
board_build.embed_txtfiles =
	html/calibration.min.htm
	html/config.min.htm
	html/firmware.min.htm
	html/format.min.htm
	html/about.min.htm
	html/index.min.htm
	html/test.min.htm
	html/backup.min.htm
